// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let currentUser = null;
let isAdmin = false;
let allPosts = [];

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const postsContainer = document.getElementById('postsContainer');
const createPostBtn = document.getElementById('createPostBtn');
const postModal = document.getElementById('postModal');
const closeModal = document.querySelector('.close');
const postForm = document.getElementById('postForm');
const quickPost = document.getElementById('quickPost');
const quickPostBtn = document.getElementById('quickPostBtn');
const totalPostsEl = document.getElementById('totalPosts');
const totalLikesEl = document.getElementById('totalLikes');
const recentUsersEl = document.getElementById('recentUsers');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    checkAdminStatus();
    loadPosts();
    if (isAdmin) {
        loadRecentUsers();
    }
    setupEventListeners();
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
function checkAdminStatus() {
    const quickPostSection = document.getElementById('quickPost');
    
    if (quickPostSection) {
        isAdmin = true;
        console.log('üëë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    } else {
        console.log('üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∑–≤–∏—á–∞–π–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
    }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
function setupEventListeners() {
    if (createPostBtn) {
        createPostBtn.addEventListener('click', openModal);
    }
    if (closeModal) {
        closeModal.addEventListener('click', closeModalFunc);
    }
    window.addEventListener('click', outsideClick);
    if (postForm) {
        postForm.addEventListener('submit', handlePostSubmit);
    }
    if (quickPostBtn) {
        quickPostBtn.addEventListener('click', handleQuickPost);
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ (–¥–ª—è –≤—Å—ñ—Ö)
function openModal() {
    postModal.style.display = 'block';
}

function closeModalFunc() {
    if (postModal) {
        postModal.style.display = 'none';
    }
    if (postForm) {
        postForm.reset();
    }
}

function outsideClick(e) {
    if (e.target === postModal) {
        closeModalFunc();
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
async function loadPosts() {
    try {
        const response = await fetch('/api/posts');
        const posts = await response.json();
        allPosts = posts;
        displayPosts(posts);
        if (isAdmin) {
            updateStats();
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤:', error);
        if (postsContainer) {
            postsContainer.innerHTML = '<div class="loading">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤</div>';
        }
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
function displayPosts(posts) {
    if (!postsContainer) return;
    
    if (posts.length === 0) {
        postsContainer.innerHTML = `
            <div class="post-card">
                <div class="empty-state">
                    <h3>üì≠ –©–µ –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤</h3>
                    <p>–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π –ø–æ—Å—Ç!</p>
                </div>
            </div>
        `;
        return;
    }

    postsContainer.innerHTML = posts.map(post => `
        <div class="post-card" data-post-id="${post.id}">
            <div class="post-header">
                <div class="post-author">
                    üë§ ${post.author}
                    ${post.author_role === 'admin' ? '<span style="color: gold; margin-left: 5px;">üëë</span>' : ''}
                </div>
                <div class="post-date">üìÖ ${post.date_posted}</div>
            </div>
            <h3 class="post-title">${post.title}</h3>
            <div class="post-content">${post.content}</div>
            <div class="post-actions">
                <button class="like-btn" onclick="likePost(${post.id})">
                    ‚ù§Ô∏è <span class="like-count">${post.likes}</span>
                </button>
                ${isAdmin ? `<button class="delete-btn" onclick="deletePost(${post.id})">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>` : ''}
            </div>
        </div>
    `).join('');
}

// –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ (–¥–ª—è –≤—Å—ñ—Ö)
async function handlePostSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(postForm);
    const postData = {
        title: formData.get('title'),
        content: formData.get('content')
    };

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!postData.title.trim() || !postData.content.trim()) {
        showMessage('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è', 'error');
        return;
    }

    try {
        const response = await fetch('/api/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postData)
        });

        const result = await response.json();
        
        if (result.success) {
            closeModalFunc();
            loadPosts();
            showMessage('‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!', 'success');
        } else {
            showMessage('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç—É', 'error');
    }
}

// –®–≤–∏–¥–∫–∏–π –ø–æ—Å—Ç (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
async function handleQuickPost() {
    if (!isAdmin) {
        alert('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω!');
        return;
    }

    const content = quickPost.value.trim();
    if (!content) {
        showMessage('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏', 'error');
        return;
    }

    const postData = {
        title: 'üî• –í–∞–∂–ª–∏–≤–∞ –Ω–æ–≤–∏–Ω–∞',
        content: content
    };

    try {
        const response = await fetch('/api/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postData)
        });

        const result = await response.json();
        
        if (result.success) {
            quickPost.value = '';
            loadPosts();
            showMessage('‚úÖ –í–∞–∂–ª–∏–≤—É –Ω–æ–≤–∏–Ω—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!', 'success');
        } else {
            showMessage('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏', 'error');
    }
}

// –õ–∞–π–∫ –ø–æ—Å—Ç—É
async function likePost(postId) {
    try {
        const response = await fetch(`/api/posts/${postId}/like`, {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            const likeBtn = document.querySelector(`[data-post-id="${postId}"] .like-count`);
            if (likeBtn) {
                likeBtn.textContent = result.likes;
            }
            if (isAdmin) {
                updateStats();
            }
            showMessage('‚ù§Ô∏è –í–∞–º —Å–ø–æ–¥–æ–±–∞–≤—Å—è —Ü–µ–π –ø–æ—Å—Ç!', 'success');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ª–∞–π–∫—É:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É –ø–æ—Å—Ç—É', 'error');
    }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async function deletePost(postId) {
    if (!isAdmin) {
        alert('–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ—Å—Ç–∏!');
        return;
    }
    
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–æ—Å—Ç?')) {
        return;
    }
    
    try {
        // –¢–∏–º—á–∞—Å–æ–≤–æ - –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        // –ü—ñ–∑–Ω—ñ—à–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ API –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        alert('–§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ');
        // loadPosts(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—ñ—á–∫—É
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç—É', 'error');
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async function loadRecentUsers() {
    if (!isAdmin) return;
    
    try {
        const response = await fetch('/api/users');
        const users = await response.json();
        displayRecentUsers(users.slice(-5));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
function displayRecentUsers(users) {
    if (!recentUsersEl || !isAdmin) return;
    
    if (users.length === 0) {
        recentUsersEl.innerHTML = '<p>üë• –©–µ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</p>';
        return;
    }

    recentUsersEl.innerHTML = users.map(user => `
        <div class="user-item">
            <div class="user-avatar">${user.fullName.charAt(0)}</div>
            <div class="user-info">
                <div class="user-name">
                    ${user.fullName}
                    ${user.role === 'admin' ? '<span style="color: gold; margin-left: 5px;">üëë</span>' : ''}
                </div>
                <div class="user-email">üìß ${user.email}</div>
                <div class="user-date">üìÖ ${user.registration_date}</div>
            </div>
        </div>
    `).join('');
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
function updateStats() {
    if (!isAdmin || !totalPostsEl || !totalLikesEl) return;
    
    const totalPosts = allPosts.length;
    const totalLikes = allPosts.reduce((sum, post) => sum + post.likes, 0);
    
    totalPostsEl.textContent = totalPosts;
    totalLikesEl.textContent = totalLikes;
}

// –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showMessage(message, type) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        background: ${type === 'success' ? '#4CAF50' : '#f44336'};
        color: white;
        border-radius: 10px;
        z-index: 10000;
        font-weight: bold;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 300);
    }, 3000);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    loadPosts();
    if (isAdmin) {
        loadRecentUsers();
    }
}, 30000);

// –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ—à—ñ ESC –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && postModal && postModal.style.display === 'block') {
        closeModalFunc();
    }
});
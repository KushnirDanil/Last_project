// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let currentUser = null;
let isAdmin = false;
let allPosts = [];

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const postsContainer = document.getElementById('postsContainer');
const createPostBtn = document.getElementById('createPostBtn');
const postModal = document.getElementById('postModal');
const closeModal = document.querySelector('.close');
const postForm = document.getElementById('postForm');
const quickPost = document.getElementById('quickPost');
const quickPostBtn = document.getElementById('quickPostBtn');
const totalPostsEl = document.getElementById('totalPosts');
const totalLikesEl = document.getElementById('totalLikes');
const recentUsersEl = document.getElementById('recentUsers');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    checkAdminStatus();
    loadPosts();
    if (isAdmin) {
        loadRecentUsers();
    }
    setupEventListeners();
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
function checkAdminStatus() {
    const quickPostSection = document.getElementById('quickPost');
    isAdmin = !!quickPostSection;
    console.log(isAdmin ? 'üëë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' : 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∑–≤–∏—á–∞–π–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
function setupEventListeners() {
    if (createPostBtn) {
        createPostBtn.addEventListener('click', openModal);
    }
    if (closeModal) {
        closeModal.addEventListener('click', closeModalFunc);
    }
    window.addEventListener('click', outsideClick);
    if (postForm) {
        postForm.addEventListener('submit', handlePostSubmit);
    }
    if (quickPostBtn) {
        quickPostBtn.addEventListener('click', handleQuickPost);
    }
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ—à—ñ ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && postModal && postModal.style.display === 'block') {
            closeModalFunc();
        }
    });
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function openModal() {
    if (postModal) {
        postModal.style.display = 'block';
        document.getElementById('postTitle')?.focus();
    }
}

function closeModalFunc() {
    if (postModal) {
        postModal.style.display = 'none';
    }
    if (postForm) {
        postForm.reset();
    }
}

function outsideClick(e) {
    if (e.target === postModal) {
        closeModalFunc();
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
async function loadPosts() {
    try {
        showLoadingState();
        const response = await fetch('/api/posts');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const posts = await response.json();
        allPosts = posts;
        displayPosts(posts);
        if (isAdmin) {
            updateStats();
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤:', error);
        showErrorState('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤');
    }
}

function showLoadingState() {
    if (postsContainer) {
        postsContainer.innerHTML = `
            <div class="post-card">
                <div class="loading-state">
                    <div class="loading-spinner"></div>
                    <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤...</p>
                </div>
            </div>
        `;
    }
}

function showErrorState(message) {
    if (postsContainer) {
        postsContainer.innerHTML = `
            <div class="post-card">
                <div class="error-state">
                    <h3>${message}</h3>
                    <button onclick="loadPosts()" class="retry-btn">üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É</button>
                </div>
            </div>
        `;
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤
function displayPosts(posts) {
    if (!postsContainer) return;
    
    if (!posts || posts.length === 0) {
        postsContainer.innerHTML = `
            <div class="post-card">
                <div class="empty-state">
                    <h3>üì≠ –©–µ –Ω–µ–º–∞—î –ø–æ—Å—Ç—ñ–≤</h3>
                    <p>–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π –ø–æ—Å—Ç!</p>
                </div>
            </div>
        `;
        return;
    }

    postsContainer.innerHTML = posts.map(post => `
        <div class="post-card" data-post-id="${post.id}">
            <div class="post-header">
                <div class="post-author">
                    üë§ ${post.author}
                    ${post.author_role === 'admin' ? '<span class="admin-badge" title="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä">üëë</span>' : ''}
                </div>
                <div class="post-date">üìÖ ${post.date_posted}</div>
            </div>
            <h3 class="post-title">${post.title}</h3>
            <div class="post-content">${post.content}</div>
            <div class="post-actions">
                <button class="like-btn" onclick="likePost(${post.id})" aria-label="–í–ø–æ–¥–æ–±–∞—Ç–∏ –ø–æ—Å—Ç">
                    ‚ù§Ô∏è <span class="like-count">${post.likes}</span>
                </button>
                ${isAdmin ? `
                    <button class="delete-btn" onclick="deletePost(${post.id})" aria-label="–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç">
                        üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                    </button>
                ` : ''}
            </div>
        </div>
    `).join('');
}

// –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç—É —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
async function handlePostSubmit(e) {
    e.preventDefault();
    
    const submitBtn = postForm.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    
    try {
        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏
        const title = document.getElementById('postTitle').value.trim();
        const content = document.getElementById('postContent').value.trim();
        
        if (!title || !content) {
            showMessage('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è', 'error');
            return;
        }
        
        if (title.length > 200) {
            showMessage('‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª—ñ–≤)', 'error');
            return;
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        submitBtn.textContent = '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è...';
        submitBtn.classList.add('loading');
        submitBtn.disabled = true;
        
        const postData = {
            title: title,
            content: content
        };

        const response = await fetch('/api/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postData)
        });

        const result = await response.json();
        
        if (result.success) {
            closeModalFunc();
            await loadPosts();
            showMessage('‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!', 'success');
        } else {
            showMessage('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç—É', 'error');
    } finally {
        // –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É
        submitBtn.textContent = originalText;
        submitBtn.classList.remove('loading');
        submitBtn.disabled = false;
    }
}

// –®–≤–∏–¥–∫–∏–π –ø–æ—Å—Ç (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)
async function handleQuickPost() {
    if (!isAdmin) {
        showMessage('‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —à–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω!', 'error');
        return;
    }

    const content = quickPost.value.trim();
    if (!content) {
        showMessage('‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏', 'error');
        return;
    }

    const postData = {
        title: 'üî• –í–∞–∂–ª–∏–≤–∞ –Ω–æ–≤–∏–Ω–∞',
        content: content
    };

    try {
        quickPostBtn.disabled = true;
        quickPostBtn.textContent = '–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è...';

        const response = await fetch('/api/posts', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(postData)
        });

        const result = await response.json();
        
        if (result.success) {
            quickPost.value = '';
            await loadPosts();
            showMessage('‚úÖ –í–∞–∂–ª–∏–≤—É –Ω–æ–≤–∏–Ω—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!', 'success');
        } else {
            showMessage('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏', 'error');
    } finally {
        quickPostBtn.disabled = false;
        quickPostBtn.textContent = 'üöÄ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É';
    }
}

// –õ–∞–π–∫ –ø–æ—Å—Ç—É
async function likePost(postId) {
    try {
        const likeBtn = document.querySelector(`[data-post-id="${postId}"] .like-btn`);
        if (likeBtn) {
            likeBtn.disabled = true;
        }

        const response = await fetch(`/api/posts/${postId}/like`, {
            method: 'POST'
        });

        const result = await response.json();
        
        if (result.success) {
            const likeCount = document.querySelector(`[data-post-id="${postId}"] .like-count`);
            if (likeCount) {
                likeCount.textContent = result.likes;
            }
            if (isAdmin) {
                updateStats();
            }
            showMessage('‚ù§Ô∏è –í–∞–º —Å–ø–æ–¥–æ–±–∞–≤—Å—è —Ü–µ–π –ø–æ—Å—Ç!', 'success');
        } else {
            showMessage('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ª–∞–π–∫—É:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–∞–π–∫—É –ø–æ—Å—Ç—É', 'error');
    } finally {
        const likeBtn = document.querySelector(`[data-post-id="${postId}"] .like-btn`);
        if (likeBtn) {
            likeBtn.disabled = false;
        }
    }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async function deletePost(postId) {
    if (!isAdmin) {
        showMessage('‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ—Å—Ç–∏!', 'error');
        return;
    }
    
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –ø–æ—Å—Ç? –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏.')) {
        return;
    }
    
    try {
        const deleteBtn = document.querySelector(`[data-post-id="${postId}"] .delete-btn`);
        if (deleteBtn) {
            deleteBtn.disabled = true;
            deleteBtn.textContent = '–í–∏–¥–∞–ª–µ–Ω–Ω—è...';
        }

        const response = await fetch(`/api/posts/${postId}`, {
            method: 'DELETE'
        });

        const result = await response.json();
        
        if (result.success) {
            showMessage('‚úÖ –ü–æ—Å—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!', 'success');
            await loadPosts();
        } else {
            showMessage('‚ùå ' + result.message, 'error');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:', error);
        showMessage('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–æ—Å—Ç—É', 'error');
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async function loadRecentUsers() {
    if (!isAdmin || !recentUsersEl) return;
    
    try {
        const response = await fetch('/api/users');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const users = await response.json();
        displayRecentUsers(users.slice(-5));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
        recentUsersEl.innerHTML = '<p>‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</p>';
    }
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function displayRecentUsers(users) {
    if (!recentUsersEl || !isAdmin) return;
    
    if (!users || users.length === 0) {
        recentUsersEl.innerHTML = '<p>üë• –©–µ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</p>';
        return;
    }

    recentUsersEl.innerHTML = users.map(user => `
        <div class="user-item">
            <div class="user-avatar" aria-label="–ê–≤–∞—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞">
                ${user.fullName ? user.fullName.charAt(0).toUpperCase() : '?'}
            </div>
            <div class="user-info">
                <div class="user-name">
                    ${user.fullName || '–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'}
                    ${user.role === 'admin' ? '<span class="admin-badge" title="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä">üëë</span>' : ''}
                </div>
                <div class="user-email">üìß ${user.email || '–ù–µ–º–∞—î email'}</div>
                <div class="user-date">üìÖ ${user.registration_date || '–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞'}</div>
            </div>
        </div>
    `).join('');
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    if (!isAdmin || !totalPostsEl || !totalLikesEl) return;
    
    const totalPosts = allPosts.length;
    const totalLikes = allPosts.reduce((sum, post) => sum + (post.likes || 0), 0);
    
    totalPostsEl.textContent = totalPosts;
    totalLikesEl.textContent = totalLikes;
}

// –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function showMessage(message, type) {
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => notification.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.setAttribute('role', 'alert');
    notification.setAttribute('aria-live', 'polite');
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 25px;
        background: ${type === 'success' ? '#4CAF50' : '#f44336'};
        color: white;
        border-radius: 10px;
        z-index: 10000;
        font-weight: bold;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        transform: translateX(100%);
        transition: transform 0.3s ease;
        max-width: 300px;
        word-wrap: break-word;
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 300);
    }, 5000);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—ñ—á–∫–∏
setInterval(() => {
    loadPosts();
    if (isAdmin) {
        loadRecentUsers();
    }
}, 30000);

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
window.likePost = likePost;
window.deletePost = deletePost;
window.loadPosts = loadPosts;
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, date
import os
import hashlib

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'your-secret-key-here'

db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True) # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    fullName = db.Column(db.String(100), nullable=False) # –ü–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    email = db.Column(db.String(100), unique=True, nullable=False) # –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    phone = db.Column(db.String(20), nullable=False) # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    password = db.Column(db.String(128), nullable=False) # –•–µ—à–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    registration_date = db.Column(db.DateTime, default=datetime.utcnow) # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    role = db.Column(db.String(20), default='user') # –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: 'user' –∞–±–æ 'admin'
    posts = db.relationship('Post', backref='author', lazy=True) # –í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –ø–æ—Å—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True) # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞
    title = db.Column(db.String(200), nullable=False) # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
    content = db.Column(db.Text, nullable=False) # –ó–º—ñ—Å—Ç –ø–æ—Å—Ç–∞
    date_posted = db.Column(db.DateTime, default=datetime.utcnow) # –î–∞—Ç–∞ —Ç–∞ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ—Å—Ç–∞
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False) # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å—Ç–∞
    likes = db.Column(db.Integer, default=0) # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤ –ø–æ—Å—Ç–∞

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏
def init_db():
    with app.app_context():
        db.create_all()
        
        admin = User.query.filter_by(email='dankusnir09@gmail.com').first()
        if not admin:
            admin_user = User(
                fullName='–ö—É—à–Ω—ñ—Ä –î–∞–Ω—ñ—ó–ª',
                email='dankusnir09@gmail.com',
                phone='0977138005',
                password=hash_password('admin123'),  # –ü–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                role='admin'
            )
            db.session.add(admin_user)
            db.session.commit()
            print("‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!")
            print("üìß Email: dankusnir09@gmail.com")
            print("üîë –ü–∞—Ä–æ–ª—å: admin123")

with app.app_context():
    init_db()

# –ú–∞—Ä—à—Ä—É—Ç–∏
@app.route('/')
def index():
    users = User.query.all()
    today = date.today()
    today_users = User.query.filter(db.func.date(User.registration_date) == today).count()
    
    user_logged_in = 'user_id' in session
    current_user = None
    if user_logged_in:
        current_user = User.query.get(session['user_id'])
    
    return render_template('index.html', 
                         users=users, 
                         today_users=today_users,
                         user_logged_in=user_logged_in,
                         current_user=current_user)

@app.route('/register', methods=['POST'])
def register():
    try:
        fullName = request.form['fullName']
        email = request.form['email']
        phone = request.form['phone']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—ñ–≤
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å!')
            return redirect('/')
        
        if len(password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 6 —Å–∏–º–≤–æ–ª—ñ–≤!')
            return redirect('/')
        
        existing_user = User.query.filter_by(email=email).first()
        if existing_user:
            flash('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î! –£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É.')
            return redirect('/')
        
        # –ó–∞–≤–∂–¥–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        role = 'user'
        
        # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –±—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω
        existing_admin = User.query.filter_by(role='admin').first()
        if email == 'dankusnir09@gmail.com' and existing_admin:
            flash('–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ —ñ—Å–Ω—É—î! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ñ–Ω—à–∏–π email.')
            return redirect('/')
        
        new_user = User(
            fullName=fullName, 
            email=email, 
            phone=phone, 
            password=hash_password(password),
            role=role
        )
        db.session.add(new_user)
        db.session.commit()
        
        session['user_id'] = new_user.id
        session['user_email'] = new_user.email
        
        flash('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.')
        return redirect('/')
    except Exception as e:
        flash('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ' + str(e))
        return redirect('/')

@app.route('/login', methods=['POST'])
def login():
    try:
        email = request.form['email']
        password = request.form['password']
        
        user = User.query.filter_by(email=email).first()
        if user and user.password == hash_password(password):
            session['user_id'] = user.id
            session['user_email'] = user.email
            flash(f'–í—ñ—Ç–∞—î–º–æ, {user.fullName}! –í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏.')
        else:
            flash('–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å!')
        
        return redirect('/')
    except Exception as e:
        flash('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ' + str(e))
        return redirect('/')

@app.route('/logout')
def logout():
    session.clear()
    flash('–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.')
    return redirect('/')

@app.route('/newsfeed')
def newsfeed():
    if 'user_id' not in session:
        flash('–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç—Ä—ñ—á–∫–∏.')
        return redirect('/')
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–Ü–ù–Ü–Ø - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get()
    current_user = User.query.get(session.get('user_id'))
    return render_template('newsfeed.html', current_user=current_user)

# –†–µ—à—Ç–∞ API –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏...
@app.route('/api/users')
def get_users():
    users = User.query.all()
    users_data = []
    for user in users:
        users_data.append({
            'id': user.id,
            'fullName': user.fullName,
            'email': user.email,
            'phone': user.phone,
            'role': user.role,
            'registration_date': user.registration_date.strftime('%d.%m.%Y %H:%M')
        })
    return jsonify(users_data)

@app.route('/api/posts', methods=['GET', 'POST'])
def handle_posts():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({'success': False, 'message': '–£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É!'})

    if request.method == 'POST':
        data = request.json
        
        # –¢–µ–ø–µ—Ä –∫–æ–∂–µ–Ω –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏
        user_id = session.get('user_id')
        if not user_id:
            return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Å—ñ—ó'})
        user = User.query.get(user_id)
        
        new_post = Post(
            title=data['title'],
            content=data['content'],
            user_id=user.id
        )
        db.session.add(new_post)
        db.session.commit()
        return jsonify({'success': True, 'message': '–ü–æ—Å—Ç –¥–æ–¥–∞–Ω–æ!'})
    
    posts = Post.query.order_by(Post.date_posted.desc()).all()
    posts_data = []
    for post in posts:
        posts_data.append({
            'id': post.id,
            'title': post.title,
            'content': post.content,
            'date_posted': post.date_posted.strftime('%d.%m.%Y %H:%M'),
            'author': post.author.fullName,
            'author_role': post.author.role,
            'likes': post.likes
        })
    return jsonify(posts_data)

@app.route('/api/posts/<int:post_id>/like', methods=['POST'])
def like_post(post_id):
    post = Post.query.get_or_404(post_id)
    post.likes += 1
    db.session.commit()
    return jsonify({'success': True, 'likes': post.likes})

if __name__ == '__main__':
    app.run(debug=True)